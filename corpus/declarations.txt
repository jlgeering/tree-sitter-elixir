============
empty module
============

defmodule ModuleName do
end
defmodule Nested.Module do
end

---

(program
  (module (alias))
  (module (alias)))

======================
module with attributes
======================

defmodule Name do
  @after_compile
  @before_compile
  @behaviour Good.Module
  @custom_attr [:hello, "world"]
  @custom_attr [hello: "world"]
  @custom_attr hello: "world"
  @custom_attr a: 1, b: 2
  @dialyzer {:nowarn_function, my_fun: 1}
  @file "hello.ex"
  @external_resource
  @moduledoc "an apple a day, keeps the moduledoc away"
  @on_load
  @vsn "1.0"
end

---

(program
  (module (alias)
    (module_attribute)
    (module_attribute)
    (module_attribute (alias))
    (module_attribute (list (atom) (string)))
    (module_attribute (keyword_list (keyword (string))))
    (module_attribute (implicit_keyword_list (keyword (string))))
    (module_attribute (implicit_keyword_list (keyword (integer)) (keyword (integer))))
    (module_attribute (tuple (atom) (implicit_keyword_list (keyword (integer)))))
    (module_attribute (string))
    (module_attribute)
    (module_attribute (string))
    (module_attribute)
    (module_attribute (string))))

===============================
module with function attributes
===============================

defmodule Name do
  @deprecated "Use Module.bar/0 instead"
  @doc "Hello world"
  # TODO 
  # @doc """
  # Doesn't do much.
  # """
  @doc deprecated: "Use Module.bar/0 instead"
  @doc since: "1.1.0"
  @impl true
  @impl Module
  @on_definition
  # def foo() do
  # end
end

---

(program
  (module (alias)
    (module_attribute (string))
    (module_attribute (string))
    (comment)
    (comment)
    (comment)
    (comment)
    (module_attribute (implicit_keyword_list (keyword (string))))
    (module_attribute (implicit_keyword_list (keyword (string))))
    (module_attribute (true))
    (module_attribute (alias))
    (module_attribute)
    (comment)
    (comment)))

===========================
module with type attributes
===========================

defmodule Name do
  @typedoc "This type"
  @typedoc since: "1.1.0"
  # TODO @type t :: term
end

---

(program
  (module (alias)
    (module_attribute (string))
    (module_attribute (implicit_keyword_list (keyword (string))))
    (comment)))

=======================
empty struct definition
=======================

defmodule Name do
  # defstruct []
end

---

(program
  (module (alias)
    (comment)))

=================
struct definition
=================

defmodule Name do
  # defstruct a: nil, b: 0, c: ""
end
defmodule Name do
  # defstruct [:a, b: 0, c: ""]
end

---

(program
  (module (alias)
    (comment))
  (module (alias)
    (comment)))
