=======
integer
=======

1234

---

(program (integer))

=======================
integer with underscore
=======================

1_234

---

(program (integer))

==========================
integer in binary notation
==========================

0b1_0

---

(program (integer))

=========================
integer in octal notation
=========================

0o1234567

---

(program (integer))

===============================
integer in hexadecimal notation
===============================

0xa_bcd_ef0_123_456_789
0x1F

---

(program (integer) (integer))

=====
float
=====

1.0
123.456
---

(program (float) (float))

============================
float in scientific notation
============================

1.0E0
1.0e+6
1.0e-6
1.234_5e678_90


---

(program (float) (float) (float) (float))

==============
true and false
==============

true
:true
false
:false

---

(program (true) (true) (false) (false))

====
atom
====

:ok
:hello_world
:Hello_World
:_42
:_foo
:foo!
:bar?
:foo@bar

---

(program
  (atom)
  (atom)
  (atom)
  (atom)
  (atom)
  (atom)
  (atom)
  (atom))

================
atom with quotes
================

:'hello-world'
:"multiple words"
:""

---

(program (atom) (atom) (atom))

===
nil
===

nil
:nil

---

(program (nil) (nil))

========
charlist
========

''
'foo'
'123foo_@é+'
'foo\'bar'

---

(program
  (charlist)
  (charlist)
  (charlist)
  (charlist))

======
binary
======

<<>>
<<1>>
<<1,2::signed-size(16),>>
<<'charlist'>>
<< 1, "2", 3 >>
# <<"hello", rest::binary>>

---

(program
  (binary)
  (binary (binary_segment (integer)))
  (binary (binary_segment (integer)) (binary_segment (integer) (binary_options)))
  (binary (binary_segment (charlist)))
  (binary
    (binary_segment (integer))
    (binary_segment (string))
    (binary_segment (integer)))
  (comment))

======
string
======

""
"hêłłö"
"1\"2'"

---

(program
  (string)
  (string)
  (string))

===================
string with newline
===================

"hello\nworld"
"hello
world"

---

(program
  (string)
  (string))
