===========
empty tuple
===========

{}
{ }
{
}

---

(program (tuple) (tuple) (tuple))

=======
1-tuple
=======

{:ok}
{ :ok }
{:ok,}
{
  :ok
}
{
  :ok,
}

---

(program
  (tuple (atom))
  (tuple (atom))
  (tuple (atom))
  (tuple (atom))
  (tuple (atom)))

============
bigger tuple
============

{:hello, :world}
{:hello, :world,}
{1, 2, 3}

---

(program
  (tuple (atom) (atom))
  (tuple (atom) (atom))
  (tuple (integer) (integer) (integer)))
  
=============
nested tuples
=============

{{}}

---

(program (tuple (tuple)))

==========
empty list
==========

[]
[ ]
[
]

---

(program (list) (list) (list))

====
list
====

[1, 2, 3]
[1, 2, 3,]
[
  1,
  2,
  3,
]

---

(program
  (list (integer) (integer) (integer))
  (list (integer) (integer) (integer))
  (list (integer) (integer) (integer)))

================================
list in [ head | tail ] notation
================================

[1|[]]
[[]|[]]
[1|[:ok|[]]]
[ 1 | [ 2 , 3 ] ]

---

(program
  (list
    (head (integer))
    (tail (list)))
  (list
    (head (list))
    (tail (list)))
  (list
    (head (integer))
    (tail
      (list
        (head (atom))
        (tail (list)))))
  (list
    (head (integer))
    (tail (list (integer) (integer)))))
    
==============================
keyword list as list of tuples
==============================

[{:a, 1}, {:b, 2}]

---

(program
  (list
    (tuple (atom) (integer))
    (tuple (atom) (integer))))

============
keyword list
============

[hello: "world"]
[a: 1, b: 2]
# TODO ["exit on close": true]

---

(program
  (keyword_list
    (keyword (string)))
  (keyword_list
    (keyword (integer))
    (keyword (integer)))
  (comment))

====================
keyword list as tail
====================

["head" | [a: 1]]

---

(program
  (list
    (head (string))
    (tail (keyword_list (keyword (integer))))))

=====================
implicit keyword list
=====================

{:hello, hello: "world"}
{:foo, :bar, a: 1, b: 2}
["zero", first: "one", second: "two"]

---

(program
  (tuple
    (atom)
    (implicit_keyword_list (keyword (string))))
  (tuple
    (atom)
    (atom)
    (implicit_keyword_list (keyword (integer)) (keyword (integer))))
  (list
    (string)
    (implicit_keyword_list (keyword (string)) (keyword (string)))))

=========
empty map
=========

%{}
%{ }
%{
}

---

(program (map) (map) (map))

===
map
===

%{:hello => :world}
%{:hello=>:world,}
%{:a => 1, 2 => :b}
%{%{} => 1, [{nil}] => [a: :b]}

---

(program
  (map (pair (atom) (atom)))
  (map (pair (atom) (atom)))
  (map
    (pair (atom) (integer))
    (pair (integer) (atom)))
  (map
    (pair (map) (integer))
    (pair (list (tuple (nil))) (keyword_list (keyword (atom))))))

==========
map update
==========

# TODO

---

(program
  (comment))

============
empty struct
============

%Name{}
% Name{}
%Name {}
% Name {}
%Name{ }
%Name{
}

---

(program
  (struct (alias))
  (struct (alias))
  (struct (alias))
  (struct (alias))
  (struct (alias))
  (struct (alias)))

======
struct
======

%Name{:hello => :world}
%Name{:hello=>:world,}

---

(program
  (struct (alias) (pair (atom) (atom)))
  (struct (alias) (pair (atom) (atom))))


